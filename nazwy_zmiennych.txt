Podstawowe rejestry portów
DDRx (Data Direction Register x)
Rejestr ten określa kierunek każdego pinu portu x:

1 ustawia pin jako wyjście.
0 ustawia pin jako wejście.
PORTx (Data Register x)
Rejestr ten kontroluje stan wyjścia lub włącza/wyłącza rezystor pull-up dla każdego pinu portu x:

Gdy pin jest ustawiony jako wyjście (w DDRx): 1 ustawia pin na wysoki stan (high), 0 ustawia pin na niski stan (low).
Gdy pin jest ustawiony jako wejście (w DDRx): 1 włącza rezystor pull-up, 0 wyłącza rezystor pull-up.
PINx (Pin Input Register x)
Rejestr ten pozwala odczytać stan logiczny pinu portu x.

Przykłady
Nazewnictwo i przykład portu B
DDRB: Data Direction Register dla portu B. Ustawia kierunek (wejście/wyjście) dla pinów portu B.
PORTB: Data Register dla portu B. Ustawia stan logiczny lub rezystor pull-up dla pinów portu B.
PINB: Pin Input Register dla portu B. Odczytuje stan logiczny pinów portu B.
Przykłady użycia w kodzie
Ustawienie pinu jako wyjście



DDRB |= (1 << DDB4);
DDRB: Rejestr kierunku danych dla portu B.
DDB4: Numer bitu dla pinu PB4. Używając notacji 1 << DDB4, ustawiasz 4. bit rejestru DDRB na 1, co ustawia PB4 jako wyjście.
Ustawienie pinu na wysoki stan (włączenie diody)



PORTB |= (1 << PORTB4);
PORTB: Rejestr danych portu B.
PORTB4: Numer bitu dla pinu PB4. Używając notacji 1 << PORTB4, ustawiasz 4. bit rejestru PORTB na 1, co ustawia PB4 na wysoki stan (high).
Odczyt stanu pinu wejściowego



    if (PIND & (1 << PIND2)) {
        // Pin PD2 jest w wysokim stanie
    }

PIND: Rejestr wejściowy dla portu D.
PIND2: Numer bitu dla pinu PD2. PIND & (1 << PIND2) sprawdza, czy 2. bit rejestru PIND jest ustawiony na 1, co oznacza, że PD2 jest w wysokim stanie.
Wyjaśnienie poszczególnych linii kodu
Rejestry i konfiguracja



    DDRB |= (1 << DDB3); // PB3 jako wyjście (PWM)
    DDRB |= (1 << DDB4); // PB4 jako wyjście (LED)

DDRB |= (1 << DDB3);: Ustawia PB3 jako wyjście. DDB3 to bit w rejestrze DDRB odpowiadający za pin PB3.
DDRB |= (1 << DDB4);: Ustawia PB4 jako wyjście. DDB4 to bit w rejestrze DDRB odpowiadający za pin PB4.
Konfiguracja PD2 jako wejście



    DDRD &= ~(1 << DDD2); // PD2 jako wejście
    PORTD &= ~(1 << PORTD2); // Wyłączenie podciągania na PD2

DDRD &= ~(1 << DDD2);: Ustawia PD2 jako wejście. DDD2 to bit w rejestrze DDRD odpowiadający za pin PD2. Używając notacji ~(1 << DDD2), zerujesz 2. bit rejestru DDRD, co ustawia PD2 jako wejście.
PORTD &= ~(1 << PORTD2);: Wyłącza rezystor pull-up na PD2. PORTD2 to bit w rejestrze PORTD odpowiadający za pin PD2. Używając notacji ~(1 << PORTD2), zerujesz 2. bit rejestru PORTD, co wyłącza podciąganie na PD2.
Konfiguracja rejestrów kontrolujących przerwania i tryb pracy timera
Konfiguracja przerwań zewnętrznych



    EICRA &= ~(1 << ISC01); // Konfiguracja przerwania INT0 na dowolną zmianę stanu
    EICRA |= (1 << ISC00);
    EIMSK |= (1 << INT0); // Włączenie przerwania INT0

EICRA &= ~(1 << ISC01);: Ustawia bit ISC01 na 0.
EICRA |= (1 << ISC00);: Ustawia bit ISC00 na 1, co konfiguruje przerwanie INT0 do wyzwalania na każdą zmianę stanu.
EIMSK |= (1 << INT0);: Włącza przerwanie INT0.
Konfiguracja Timer2 dla PWM



    TCCR2A &= ~(1 << WGM22); // Ustawienia trybu pracy (Fast PWM)
    TCCR2A |= (1 << WGM21) | (1 << WGM20);
    TCCR2A |= (1 << COM2A1); // Ustawienia trybu wyjścia PWM (non-inverting mode)
    TCCR2A &= ~(1 << COM2A0);
    TCCR2B |= (1 << CS22); // Ustawienia preskalera
    TCCR2B &= ~((1 << CS21) | (1 << CS20));
    OCR2A = 0; // Początkowa wartość rejestru OCR2A (PWM duty cycle)

TCCR2A, TCCR2B: Rejestry kontrolujące tryb pracy Timera2.
OCR2A: Output Compare Register dla kanału A Timera2, który ustala wartość PWM.
Konfiguracja Timer1 do generowania przerwań



    TCCR1B |= (1 << WGM12); // Ustawienia trybu pracy (CTC)
    TCCR1B |= (1 << CS12) | (1 << CS10); // Ustawienia preskalera
    TCCR1B &= ~(1 << CS11);
    OCR1A = 255; // Wartość porównania dla Timer1
    TIMSK1 |= (1 << OCIE1A); // Włączenie przerwania Compare Match A dla Timer1

TCCR1B: Rejestr kontrolujący tryb pracy Timera1.
OCR1A: Output Compare Register dla kanału A Timera1, który ustala wartość porównania.
TIMSK1: Timer/Counter Interrupt Mask Register, który włącza przerwanie dla Timera1.